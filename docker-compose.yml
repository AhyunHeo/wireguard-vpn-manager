# 외부 접근용 설정
# 실제 서버 IP 주소로 SERVERURL 환경변수 설정 필요

services:
  wireguard:
    image: linuxserver/wireguard:latest
    container_name: wireguard-server
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    privileged: true
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Asia/Seoul}
      - SERVERURL=${SERVERURL:-auto}
      - SERVERPORT=${SERVERPORT:-41820}
      - PEERS=0  # 피어 자동 생성 비활성화
      - PEERDNS=${PEERDNS:-auto}
      - INTERNAL_SUBNET=${INTERNAL_SUBNET:-10.100.0.0/16}
      - ALLOWEDIPS=${ALLOWED_IPS:-10.100.0.0/16}
      - LOG_CONFS=true
      - PERSISTENTKEEPALIVE_PEERS=""  # 빈 값으로 설정
    volumes:
      - ./config:/config
      - /lib/modules:/lib/modules
      - ./config/custom-scripts:/custom-scripts:ro
    ports:
      - "41820:51820/udp"  # 호스트 41820 -> 컨테이너 51820
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    restart: unless-stopped
    networks:
      - vpn_net

  vpn-api:
    build: 
      context: .
      dockerfile: ./Dockerfile
    container_name: vpn-api
    privileged: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://vpn:vpnpass@postgres:5432/vpndb}
      - WIREGUARD_CONFIG_PATH=/config
      - API_PORT=8090
      - API_TOKEN=${API_TOKEN:-test-token-123}
      - SERVERURL=${SERVERURL:-auto}
      - LOCAL_SERVER_IP=${LOCAL_SERVER_IP:-localhost}
      - CENTRAL_SERVER_URL=${CENTRAL_SERVER_URL:-http://192.168.0.88:8000}
    volumes:
      - ./config:/config
      - /var/run/docker.sock:/var/run/docker.sock
      - ./api:/app:ro  # 소스 코드를 읽기 전용으로 마운트
      - ./scripts:/scripts:ro  # 스크립트 마운트
      - ./entrypoint.sh:/entrypoint.sh:ro  # entrypoint.sh를 루트에 마운트
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    ports:
      - "0.0.0.0:8090:8090"  # 모든 인터페이스에서 명시적으로 리스닝
    depends_on:
      - postgres
      - wireguard
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - vpn_net

  postgres:
    image: postgres:15
    container_name: vpn-postgres
    environment:
      - POSTGRES_DB=vpndb
      - POSTGRES_USER=vpn
      - POSTGRES_PASSWORD=vpnpass
    volumes:
      - vpn_db_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5434:5432"  # DB는 로컬만
    restart: unless-stopped
    networks:
      - vpn_net

  web-dashboard:
    build: ./web-dashboard
    container_name: vpn-dashboard
    environment:
      - API_URL=http://vpn-api:8090
      - API_TOKEN=${API_TOKEN:-test-token-123}
      - SERVERURL=${SERVERURL:-auto}
      - LOCAL_SERVER_IP=${LOCAL_SERVER_IP:-localhost}
    volumes:
      - ./web-dashboard:/app:ro  # 소스 코드를 읽기 전용으로 마운트
    command: python app.py  # Flask 개발 서버 사용
    ports:
      - "0.0.0.0:5000:5000"  # 모든 인터페이스
    depends_on:
      - vpn-api
    restart: unless-stopped
    networks:
      - vpn_net

  # wireguard-ui 제거 - 기존 서버와 호환 문제
  # 대신 http://192.168.0.68:5000/wireguard-status 사용

networks:
  vpn_net:
    driver: bridge

volumes:
  vpn_db_data: